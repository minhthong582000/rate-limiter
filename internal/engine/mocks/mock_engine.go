// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/minhthong582000/rate-limiter/internal/engine (interfaces: Engine)
//
// Generated by this command:
//
//	mockgen -destination=mock_engine.go -package=mocks github.com/minhthong582000/rate-limiter/internal/engine Engine
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockEngine) Allow() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockEngineMockRecorder) Allow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockEngine)(nil).Allow))
}

// AllowAt mocks base method.
func (m *MockEngine) AllowAt(arg0 time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowAt", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowAt indicates an expected call of AllowAt.
func (mr *MockEngineMockRecorder) AllowAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowAt", reflect.TypeOf((*MockEngine)(nil).AllowAt), arg0)
}
